{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/TodolistsList/tasks-reducer.ts","features/Login/auth-reducer.tsx","app/app-reducer.ts","features/Login/Login.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","components/AddItemForm/AddItemForm.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","status","res","resultCode","type","updateTaskAC","catch","console","warn","isLoggedIn","setIsLoggedInAC","value","isInitialized","Login","useDispatch","useSelector","state","auth","navigate","useNavigate","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","loginTC","resetForm","Grid","container","justifyContent","item","handleSubmit","FormControl","FormLabel","href","target","FormGroup","TextField","label","margin","getFieldProps","touched","style","color","FormControlLabel","control","Checkbox","Button","variant","EditableSpan","React","memo","props","useState","editMode","setEditMode","setTitle","onChange","e","currentTarget","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","IconButton","onClick","Delete","AddItemForm","addItem","disabled","setError","addItemHandler","trim","onKeyPress","charCode","helperText","Todolist","demo","addTask","todolist","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","entityStatus","map","paddingTop","fetchTodolistsTC","todolists","todos","forEach","tl","items","setTasksAC","TodolistsList","useEffect","thunk","action","removeTaskAC","removeTaskTC","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","padding","spacing","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","App","finally","isInitilized","AppBar","position","Toolbar","LinearProgress","Container","fixed","path","element","textAlign","top","CircularProgress","rootReducer","combineReducers","todoListId","copyState","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mMA8EYA,EAOAC,E,iCCvEGC,G,OAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,iCDPRQ,E,OAAWC,EAAMC,OAAO,CAC1BC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAKNC,EAAe,WAEpB,OAAON,EAASO,IAAoB,eAF/BD,EAAe,SAITE,GACX,OAAOR,EAASS,KAA6E,aAAc,CAACD,WALvGF,EAAe,SAOTI,GACX,OAAOV,EAASW,OAAT,qBAA4CD,KAR9CJ,EAAe,SAUTI,EAAYF,GACvB,OAAOR,EAASY,IAAT,qBAA2EF,GAAM,CAACF,WAXpFF,EAAe,SAafO,GACL,OAAOb,EAASO,IAAT,qBAA6CM,EAA7C,YAdFP,EAAe,SAgBbO,EAAoBC,GAC3B,OAAOd,EAASW,OAAT,qBAA4CE,EAA5C,kBAAgEC,KAjBlER,EAAe,SAmBbO,EAAoBL,GAC3B,OAAOR,EAASS,KAAT,qBAAgGI,EAAhG,UAAoH,CAACL,WApBvHF,EAAe,SAsBbO,EAAoBC,EAAgBC,GAC3C,OAAOf,EAASY,IAAT,qBAAiGC,EAAjG,kBAAqHC,GAAUC,IAIjIC,EAAU,SACbC,GACF,OAAOjB,EAASS,KAAT,aAEQQ,IAJVD,EAAU,WAOf,OAAOhB,EAASW,OAAT,gBAPFK,EAAU,WAUf,OAAOhB,EAASO,IAAT,a,SA8BHlB,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAOAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,KEjFL,IAAM4B,EAAuB,SAAID,EAAuBE,GACvDF,EAAKG,SAASC,OACdF,EAASG,EAAcL,EAAKG,SAAS,KAErCD,EAASG,EAAc,wBAE3BH,EAASI,EAAe,YAGfC,EAA2B,SAACC,EAA4BN,GACjEA,EAASG,EAAcG,EAAMC,QAAUD,EAAMC,QAAU,wBACvDP,EAASI,EAAe,Y,eCRtBI,EAA+B,GAsFxBC,EAAe,SAACd,EAAgBe,EAAwChB,GAAzD,OACxB,SAACM,EAAyBW,GACtB,IACMC,EADQD,IACKE,MAAMnB,GAAYoB,MAAK,SAAAC,GAAC,OAAIA,EAAExB,KAAOI,KACxD,GAAKiB,EAAL,CAMA,IAAMI,EAA6B,aAC/BC,SAAUL,EAAKK,SACfC,YAAaN,EAAKM,YAClBC,SAAUP,EAAKO,SACfC,UAAWR,EAAKQ,UAChB/B,MAAOuB,EAAKvB,MACZgC,OAAQT,EAAKS,QACVX,GAGPvB,EAAwBO,EAAYC,EAAQqB,GACvCzC,MAAK,SAAA+C,GAC0B,IAAxBA,EAAIxB,KAAKyB,WACTvB,EArEQ,SAACL,EAAgBC,EAAkCF,GAAnD,MAA2E,CACnG8B,KAAM,cACN5B,QACAF,aACAC,UAiEyB8B,CAAa9B,EAAQe,EAAahB,IAE3CK,EAAqBuB,EAAIxB,KAAME,MAGtC0B,OAAM,SAACpB,GACJD,EAAyBC,EAAON,WAvBpC2B,QAAQC,KAAK,iCC7FnBpB,EAAe,CACjBqB,YAAY,GAaHC,EAAkB,SAACC,GAC5B,MAAQ,CAACP,KAAM,yBAA0BO,UCfvCvB,EAAiC,CACnCa,OAAQ,OACRf,MAAO,KACP0B,eAAe,GAuBN7B,EAAgB,SAACG,GAAD,MAA2B,CAACkB,KAAM,gBAAiBlB,UACnEF,EAAiB,SAACiB,GAAD,MAAgC,CAACG,KAAM,iBAAkBH,W,wFClB1EY,EAAQ,WAEjB,IAAMjC,EAAWkC,cACXL,EAAaM,aAAuC,SAAAC,GAAK,OAAIA,EAAMC,KAAKR,cACxES,EAAWC,cAEXC,EAASC,YAAU,CACrBC,cAAe,CACXC,MAAO,GACPC,SAAU,GACVC,YAAY,GAEhBC,SAAU,SAACC,GACP,IAAMC,EAAoD,GAW1D,OAVKD,EAAOJ,MAEA,4CAA4CM,KAAKF,EAAOJ,SAChEK,EAAOL,MAAQ,yBAFfK,EAAOL,MAAQ,WAIdI,EAAOH,SAEDG,EAAOH,SAAS1C,OAAS,IAChC8C,EAAOJ,SAAW,gCAFlBI,EAAOJ,SAAW,mIAIfI,GAEXE,SAAU,SAAAH,GACN/C,EFlBW,SAAC+C,GAAD,OAA6B,SAAC/C,GACjDA,EAASI,EAAe,YACxBP,EAAckD,GACTxE,MAAK,SAAC+C,GACyB,IAAxBA,EAAIxB,KAAKyB,YACTvB,EAASI,EAAe,cACxBJ,EAAS8B,GAAgB,KAEzB/B,EAAqBuB,EAAIxB,KAAME,MAGtC0B,OAAM,SAACpB,GACJD,EAAyBC,EAAON,OEMvBmD,CAAQJ,IACjBP,EAAOY,eAMf,OAHIvB,GACAS,EAAS,KAEN,cAACe,EAAA,EAAD,CAAMC,WAAS,EAACC,eAAgB,SAAhC,SACH,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACD,eAAgB,SAA3B,SACI,sBAAML,SAAUV,EAAOiB,aAAvB,SACI,eAACC,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,WACI,yDACI,mBAAGC,KAAM,wCACNC,OAAQ,SADX,sBAIJ,wEACA,0DACA,kDAEJ,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,aAAWC,MAAM,QAAQC,OAAO,UAAazB,EAAO0B,cAAc,WACjE1B,EAAO2B,QAAQxB,OAASH,EAAOQ,OAAOL,OACnC,qBAAKyB,MAAO,CAACC,MAAO,OAApB,SAA6B7B,EAAOQ,OAAOL,QAC/C,cAACoB,EAAA,EAAD,aAAWvC,KAAK,WAAWwC,MAAM,WACtBC,OAAO,UACHzB,EAAO0B,cAAc,cAEnC1B,EAAO2B,QAAQvB,UAAYJ,EAAOQ,OAAOJ,UACtC,qBAAKwB,MAAO,CAACC,MAAO,OAApB,SAA6B7B,EAAOQ,OAAOJ,WAC/C,cAAC0B,EAAA,EAAD,CAAkBN,MAAO,cAAeO,QAAS,cAACC,EAAA,EAAD,eACzChC,EAAO0B,cAAc,kBAC7B,cAACO,EAAA,EAAD,CAAQjD,KAAM,SAAUkD,QAAS,YAAaL,MAAO,UAArD,gC,iBCnEXM,EAAeC,IAAMC,MAAK,SAAUC,GAC7C,MAA8BC,oBAAS,GAAvC,mBAAKC,EAAL,KAAeC,EAAf,KACA,EAAwBF,mBAASD,EAAM/C,OAAvC,mBAAK1C,EAAL,KAAY6F,EAAZ,KAcA,OAAOF,EACD,cAACjB,EAAA,EAAD,CAAWhC,MAAO1C,EAAO8F,SALX,SAACC,GACjBF,EAASE,EAAEC,cAActD,QAIyBuD,WAAS,EAACC,OATvC,WACrBN,GAAY,GACZH,EAAMK,SAAS9F,MAQb,sBAAMmG,cAda,WACrBP,GAAY,GACZC,EAASJ,EAAM/C,QAYb,SAAwC+C,EAAM/C,W,kBCZ3C0D,EAAOb,IAAMC,MAAK,SAACC,GAC5B,IAAMY,EAAiBC,uBAAY,kBAAMb,EAAMc,WAAWd,EAAMlE,KAAKrB,GAAIuF,EAAMpF,cAAa,CAACoF,EAAMlE,KAAKrB,GAAIuF,EAAMpF,aAE5GmG,EAAkBF,uBAAY,SAACP,GACjC,IAAIU,EAAiBV,EAAEC,cAAcU,QACrCjB,EAAMkB,iBAAiBlB,EAAMlE,KAAKrB,GAAIuG,EAAiB5H,EAAa+H,UAAY/H,EAAagI,IAAKpB,EAAMpF,cACzG,CAACoF,EAAMlE,KAAKrB,GAAIuF,EAAMpF,aAEnByG,EAAuBR,uBAAY,SAACS,GACtCtB,EAAMuB,gBAAgBvB,EAAMlE,KAAKrB,GAAI6G,EAAUtB,EAAMpF,cACtD,CAACoF,EAAMlE,KAAKrB,GAAIuF,EAAMpF,aAEzB,OAAO,sBAAyB4G,UAAWxB,EAAMlE,KAAKS,SAAWnD,EAAa+H,UAAY,UAAY,GAA/F,UACH,cAACzB,EAAA,EAAD,CACIuB,QAASjB,EAAMlE,KAAKS,SAAWnD,EAAa+H,UAC5C5B,MAAM,UACNc,SAAUU,IAGd,cAAClB,EAAD,CAAc5C,MAAO+C,EAAMlE,KAAKvB,MAAO8F,SAAUgB,IACjD,cAACI,EAAA,EAAD,CAAYC,QAASd,EAArB,SACI,cAACe,EAAA,EAAD,QATS3B,EAAMlE,KAAKrB,O,qBChBnBmH,GAAc9B,IAAMC,MAAK,YAA8D,IAAnD8B,EAAkD,EAAlDA,QAAkD,IAAzCC,gBAAyC,SAE/F,EAAwB7B,mBAAS,IAAjC,mBAAK1F,EAAL,KAAY6F,EAAZ,KACA,EAAwBH,mBAAwB,MAAhD,mBAAKzE,EAAL,KAAYuG,EAAZ,KAEMC,EAAiB,WACE,KAAjBzH,EAAM0H,QACNJ,EAAQtH,GACR6F,EAAS,KAET2B,EAAS,sBAiBjB,OAAO,gCACH,cAAC9C,EAAA,EAAD,CAAWW,QAAQ,WACRkC,SAAUA,EACVtG,QAASA,EACTyB,MAAO1C,EACP8F,SAlBS,SAACC,GACrBF,EAASE,EAAEC,cAActD,QAkBdiF,WAfW,SAAC5B,GACT,OAAV9E,GACAuG,EAAS,MAEM,KAAfzB,EAAE6B,UACFH,KAWO9C,MAAM,QACNkD,WAAY5G,IAEvB,cAACiG,EAAA,EAAD,CAAYlC,MAAM,UAAUmC,QAASM,EAAgBF,SAAUA,EAA/D,SACI,cAAC,KAAD,Y,iCCzBCO,GAAWvC,IAAMC,MAAK,YAA+C,EAApCuC,KAAqC,IAApBtC,EAAmB,kBAExEuC,EAAU1B,uBAAY,SAACtG,GACzByF,EAAMuC,QAAQhI,EAAOyF,EAAMwC,SAAS/H,MACrC,CAACuF,EAAMuC,QAASvC,EAAMwC,SAAS/H,KAK5BgI,EAAsB5B,uBAAY,SAACtG,GACrCyF,EAAMyC,oBAAoBzC,EAAMwC,SAAS/H,GAAIF,KAC9C,CAACyF,EAAMwC,SAAS/H,GAAIuF,EAAMyC,sBAEvBC,EAAoB7B,uBAAY,kBAAMb,EAAM2C,aAAa,MAAO3C,EAAMwC,SAAS/H,MAAK,CAACuF,EAAMwC,SAAS/H,GAAIuF,EAAM2C,eAC9GC,EAAuB/B,uBAAY,kBAAMb,EAAM2C,aAAa,SAAU3C,EAAMwC,SAAS/H,MAAK,CAACuF,EAAMwC,SAAS/H,GAAIuF,EAAM2C,eACpHE,EAA0BhC,uBAAY,kBAAMb,EAAM2C,aAAa,YAAa3C,EAAMwC,SAAS/H,MAAK,CAACuF,EAAMwC,SAAS/H,GAAIuF,EAAM2C,eAG5HG,EAAmB9C,EAAMjE,MAS7B,MAP8B,WAA1BiE,EAAMwC,SAASO,SACfD,EAAmB9C,EAAMjE,MAAMgH,QAAO,SAAA9G,GAAC,OAAIA,EAAEM,SAAWnD,EAAagI,QAE3C,cAA1BpB,EAAMwC,SAASO,SACfD,EAAmB9C,EAAMjE,MAAMgH,QAAO,SAAA9G,GAAC,OAAIA,EAAEM,SAAWnD,EAAa+H,cAGlE,gCACH,+BAAI,cAACtB,EAAD,CAAc5C,MAAO+C,EAAMwC,SAASjI,MAAO8F,SAAUoC,IACrD,cAAChB,EAAA,EAAD,CAAYC,QAvBG,WACnB1B,EAAMgD,eAAehD,EAAMwC,SAAS/H,KAsBKqH,SAA0C,YAAhC9B,EAAMwC,SAASS,aAA9D,SACI,cAAC,KAAD,SAGR,cAACrB,GAAD,CAAaC,QAASU,EAAST,SAA0C,YAAhC9B,EAAMwC,SAASS,eACxD,8BAEQH,EAAiBI,KAAI,SAAAjH,GAAC,OAAI,cAAC0E,EAAD,CAAiB7E,KAAMG,EAAGrB,WAAYoF,EAAMwC,SAAS/H,GAC/CqG,WAAYd,EAAMc,WAClBS,gBAAiBvB,EAAMuB,gBACvBL,iBAAkBlB,EAAMkB,kBAHnBjF,EAAExB,SAO/C,sBAAK6E,MAAO,CAAC6D,WAAY,QAAzB,UACI,cAACxD,EAAA,EAAD,CAAQC,QAAmC,QAA1BI,EAAMwC,SAASO,OAAmB,WAAa,OACxDrB,QAASgB,EACTnD,MAAO,UAFf,iBAKA,cAACI,EAAA,EAAD,CAAQC,QAAmC,WAA1BI,EAAMwC,SAASO,OAAsB,WAAa,OAC3DrB,QAASkB,EACTrD,MAAO,UAFf,oBAIA,cAACI,EAAA,EAAD,CAAQC,QAAmC,cAA1BI,EAAMwC,SAASO,OAAyB,WAAa,OAC9DrB,QAASmB,EACTtD,MAAO,YAFf,gCCvEN7D,GAA0C,GA2CnC0H,GAAmB,WAC5B,OAAO,SAAClI,GACJA,EAASI,EAAe,YACxBjB,IACKZ,MAAK,SAAC+C,GAGH,OAFAtB,EARmD,CAACwB,KAAM,gBAAiB2G,UAQnD7G,EAAIxB,OAC5BE,EAASI,EAAe,cACjBkB,EAAIxB,QAEdvB,MAAK,SAAC6J,GACHA,EAAMC,SAAQ,SAACC,GREH,IAAC5I,EQDTM,GRCSN,EQDa4I,EAAG/I,GRCO,SAACS,GACjDA,EAASI,EAAe,YACxBjB,EAAsBO,GACjBnB,MAAK,SAAC+C,GACH,IAAMT,EAAQS,EAAIxB,KAAKyI,MACvBvI,EAZc,SAACa,EAAwBnB,GAAzB,MAAiD,CACvE8B,KAAM,YACNX,QACAnB,cASiB8I,CAAW3H,EAAOnB,IAC3BM,EAASI,EAAe,4B,US1CvBqI,GAAqC,SAAC,GAAoB,IAAD,IAAlBrB,YAAkB,SAC5De,EAAYhG,aAAyD,SAAAC,GAAK,OAAIA,EAAM+F,aACpFtH,EAAQsB,aAA8C,SAAAC,GAAK,OAAIA,EAAMvB,SACrEgB,EAAaM,aAAuC,SAACC,GAAD,OAAWA,EAAMC,KAAKR,cAE1E7B,EAAWkC,cAEjBwG,qBAAU,WACN,IAAItB,GAASvF,EAAb,CAGA,IAAM8G,EAAQT,KACdlI,EAAS2I,MACV,IAEH,IAAM/C,EAAaD,uBAAY,SAAUpG,EAAYG,GACjD,IAAMiJ,ET6Bc,SAAChJ,EAAgBD,GAAjB,OAAwC,SAACM,GACjEb,EAAwBO,EAAYC,GAC/BpB,MAAK,SAAA+C,GACF,IAAMsH,EA5BU,SAACjJ,EAAgBD,GAAjB,MAAyC,CAAC8B,KAAM,cAAe7B,SAAQD,cA4BxEmJ,CAAalJ,EAAQD,GACpCM,EAAS4I,OSjCCE,CAAavJ,EAAIG,GAC/BM,EAAS2I,KACV,IAEGtB,EAAU1B,uBAAY,SAAUtG,EAAeK,GACjD,IAAMiJ,ET+BW,SAACtJ,EAAeK,GAAhB,OAAuC,SAACM,GAC7DA,EAASI,EAAe,YACxBjB,EAAwBO,EAAYL,GAC/Bd,MAAK,SAAA+C,GACF,GAA4B,IAAxBA,EAAIxB,KAAKyB,WAAkB,CAC3B,IACMqH,EApCwB,CAACpH,KAAM,WAAYZ,KAmCpCU,EAAIxB,KAAKA,KAAK0D,MAE3BxD,EAAS4I,GACT5I,EAASI,EAAe,mBAExBL,EAAqBuB,EAAIxB,KAAME,MAGtC0B,OAAM,SAACpB,GACJD,EAAyBC,EAAON,OS7CtB+I,CAAU1J,EAAOK,GAC/BM,EAAS2I,KACV,IAEGK,EAAerD,uBAAY,SAAUpG,EAAY8B,EAAsB3B,GACzE,IAAMiJ,EAAQlI,EAAalB,EAAI,CAAC8B,UAAS3B,GACzCM,EAAS2I,KACV,IAEGtC,EAAkBV,uBAAY,SAAUpG,EAAY0J,EAAkBvJ,GACxE,IAAMiJ,EAAQlI,EAAalB,EAAI,CAACF,MAAO4J,GAAWvJ,GAClDM,EAAS2I,KACV,IAEGlB,EAAe9B,uBAAY,SAAU5D,EAAyBrC,GAChE,IAAMkJ,EDvBmE,CAC7EpH,KAAM,yBACNjC,GCqB0CG,EDpB1CmI,OCoBsD9F,GAClD/B,EAAS4I,KACV,IAEGd,EAAiBnC,uBAAY,SAAUpG,GACzC,IDDyBG,ECCnBiJ,GDDmBjJ,ECCMH,EDA5B,SAACS,GAEJA,EAASI,EAAe,YAExBJ,EA3BgF,CACpFwB,KAAM,gCAAiCjC,GA0BGG,EA1BC2B,OA0BW,YAClDlC,EAA4BO,GACvBnB,MAAK,SAAC+C,GACHtB,EA1CgB,SAACT,GAAD,MAAiB,CAACiC,KAAM,kBAAmBjC,MA0ClD2J,CAAiBxJ,IAE1BM,EAASI,EAAe,mBCRhCJ,EAAS2I,KACV,IAEGpB,EAAsB5B,uBAAY,SAAUpG,EAAYF,GAC1D,IAAMsJ,EDkBuB,SAACpJ,EAAYF,GAC9C,OAAO,SAACW,GACJb,EAA4BI,EAAIF,GAC3Bd,MAAK,SAAC+C,GACHtB,EA5DqB,SAACT,EAAYF,GAAb,MAAgC,CACjEmC,KAAM,wBACNjC,KACAF,SAyDqB8J,CAAsB5J,EAAIF,QCtB7B+J,CAAsB7J,EAAIF,GACxCW,EAAS2I,KACV,IAEGU,EAAc1D,uBAAY,SAACtG,GAC7B,IAAMsJ,EDGe,SAACtJ,GAC1B,OAAO,SAACW,GACJA,EAASI,EAAe,YACxBjB,EAA4BE,GACvBd,MAAK,SAAC+C,GACHtB,EApD0C,CAACwB,KAAM,eAAgB8F,SAoD1ChG,EAAIxB,KAAKA,KAAK0D,OACrCxD,EAASI,EAAe,kBCTlBkJ,CAAcjK,GAC5BW,EAAS2I,KACV,CAAC3I,IACJ,OAAK6B,EAGE,qCACH,cAACwB,EAAA,EAAD,CAAMC,WAAS,EAACc,MAAO,CAACmF,QAAS,QAAjC,SACI,cAAC7C,GAAD,CAAaC,QAAS0C,MAE1B,cAAChG,EAAA,EAAD,CAAMC,WAAS,EAACkG,QAAS,EAAzB,SAEQrB,EAAUH,KAAI,SAAAM,GACV,IAAImB,EAAmB5I,EAAMyH,EAAG/I,IAEhC,OAAO,cAAC8D,EAAA,EAAD,CAAMG,MAAI,EAAV,SACH,cAACkG,GAAA,EAAD,CAAOtF,MAAO,CAACmF,QAAS,QAAxB,SACI,cAACpC,GAAD,CACIG,SAAUgB,EACVzH,MAAO4I,EACP7D,WAAYA,EACZ6B,aAAcA,EACdJ,QAASA,EACTrB,iBAAkBgD,EAClBlB,eAAgBA,EAChBzB,gBAAiBA,EACjBkB,oBAAqBA,EACrBH,KAAMA,OAZKkB,EAAG/I,YAX/B,cAAC,IAAD,CAAUoK,GAAI,W,oBCxEvBC,GAAQhF,IAAMiF,YAAuC,SACvD/E,EAAOgF,GACP,OAAO,cAAC,KAAD,aAAUC,UAAW,EAAGD,IAAKA,EAAKpF,QAAQ,UAAaI,OAG3D,SAASkF,KACZ,IAAM1J,EAAQ6B,aAA6C,SAAAC,GAAK,OAAIA,EAAM6H,IAAI3J,SACxEN,EAAWkC,cAEXgI,EAAc,SAACC,EAAsCC,GACxC,cAAXA,GAGJpK,EAASG,EAAc,QAG3B,OACI,cAACkK,GAAA,EAAD,CAAUC,KAAgB,OAAVhK,EAAgBiK,iBAAkB,IAAMC,QAASN,EAAjE,SACI,cAAC,GAAD,CAAOM,QAASN,EAAaO,SAAS,QAAQC,GAAI,CAACC,MAAO,QAA1D,SACKrK,M,6DCwCFsK,OA5Cf,YAAyC,IAAD,IAA1BxD,YAA0B,SAE9BpH,EAAWkC,cAEXb,EAASc,aAAiD,SAAAC,GAAK,OAAIA,EAAM6H,IAAI5I,UAC7EW,EAAgBG,aAAuC,SAAAC,GAAK,OAAIA,EAAM6H,IAAIjI,iBAC1EH,EAAaM,aAAuC,SAAAC,GAAK,OAAIA,EAAMC,KAAKR,cAU9E,OARA6G,qBAAU,WACN1I,GTM6B,SAACA,GAClCH,IAAatB,MAAK,SAAA+C,GACc,IAAxBA,EAAIxB,KAAKyB,YACTvB,EAAS8B,GAAgB,OAI5BJ,OAAM,SAACpB,GACJD,EAAyBC,EAAON,MAEnC6K,SAAQ,WACL7K,EAdmD,CAACwB,KAAM,yBAA0BsJ,cAcvD,YShBlC,IAME9I,EAQD,sBAAKsE,UAAU,MAAf,UACI,cAAC0D,GAAD,IACA,eAACe,GAAA,EAAD,CAAQC,SAAS,SAAjB,UACI,cAACC,GAAA,EAAD,UACKpJ,GAAc,cAAC4C,EAAA,EAAD,CAAQJ,MAAM,UAAUmC,QAfjC,WAClBxG,GVGsB,SAACA,GAC3BA,EAASI,EAAe,YACxBP,IACKtB,MAAK,SAAC+C,GACyB,IAAxBA,EAAIxB,KAAKyB,YACTvB,EAASI,EAAe,cACxBJ,EAAS8B,GAAgB,IACzB9B,EDDkB,CAACwB,KAAM,gBCGzBzB,EAAqBuB,EAAIxB,KAAME,MAGtC0B,OAAM,SAACpB,GACJD,EAAyBC,EAAON,UUFT,sBAEP,YAAXqB,GAAwB,cAAC6J,GAAA,EAAD,OAE7B,cAACC,GAAA,EAAD,CAAWC,OAAK,EAAhB,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS,cAAC,GAAD,CAAelE,KAAMA,MAC9C,cAAC,IAAD,CAAOiE,KAAK,SAASC,QAAS,cAAC,EAAD,MAC9B,cAAC,IAAD,CAAOD,KAAK,OAAOC,QAAS,oBAAIlH,MAAO,CAACmH,UAAW,UAAvB,mCAC5B,cAAC,IAAD,CAAOF,KAAK,IAAIC,QAAS,cAAC,IAAD,CAAU3B,GAAG,mBApB3C,qBACHvF,MAAO,CAAC4G,SAAU,QAASQ,IAAK,MAAOD,UAAW,SAAUZ,MAAO,QADhE,SAEH,cAACc,GAAA,EAAD,O,mBChCNC,GAAcC,aAAgB,CAChC9K,MZDwB,WAAgF,IAA/EuB,EAA8E,uDAAtD5B,EAAcoI,EAAwC,uCACvG,OAAQA,EAAOpH,MACX,IAAK,cACD,OAAO,2BAAIY,GAAX,kBAAmBwG,EAAOlJ,WAAa0C,EAAMwG,EAAOlJ,YAAYmI,QAAO,SAAA9G,GAAC,OAAIA,EAAExB,KAAOqJ,EAAOjJ,YAChG,IAAK,WACD,OAAO,2BAAIyC,GAAX,kBAAmBwG,EAAOhI,KAAKgL,WAA/B,CAA6ChD,EAAOhI,MAApD,mBAA6DwB,EAAMwG,EAAOhI,KAAKgL,gBACnF,IAAK,cACD,OAAO,2BACAxJ,GADP,kBAEKwG,EAAOlJ,WAAa0C,EAAMwG,EAAOlJ,YAC7BsI,KAAI,SAAAjH,GAAC,OAAIA,EAAExB,KAAOqJ,EAAOjJ,OAAhB,2BAA6BoB,GAAM6H,EAAOhJ,OAASmB,OAEzE,IAAK,eACD,OAAO,2BAAIqB,GAAX,kBAAmBwG,EAAOtB,SAAS/H,GAAK,KAC5C,IAAK,kBACD,IAAMsM,EAAS,eAAOzJ,GAEtB,cADOyJ,EAAUjD,EAAOrJ,IACjBsM,EACX,IAAK,gBACD,IAAMA,EAAS,eAAOzJ,GAItB,OAHAwG,EAAOT,UAAUE,SAAQ,SAAAC,GACrBuD,EAAUvD,EAAG/I,IAAM,MAEhBsM,EAEX,IAAK,YACD,OAAO,2BAAIzJ,GAAX,kBAAmBwG,EAAOlJ,WAAakJ,EAAO/H,QAClD,IAAK,aACD,MAAO,GACX,QACI,OAAOuB,IY5Bf+F,UJJ4B,WAAsG,IAArG/F,EAAoG,uDAAjE5B,GAAcoI,EAAmD,uCACjI,OAAQA,EAAOpH,MACX,IAAK,kBACD,OAAOY,EAAMyF,QAAO,SAAAS,GAAE,OAAIA,EAAG/I,KAAOqJ,EAAOrJ,MAC/C,IAAK,eACD,MAAM,CAAN,2BAAYqJ,EAAOtB,UAAnB,IAA6BO,OAAQ,MAAOE,aAAc,UAA1D,mBAAsE3F,IAE1E,IAAK,wBACD,OAAOA,EAAM4F,KAAI,SAAAM,GAAE,OAAIA,EAAG/I,KAAOqJ,EAAOrJ,GAAjB,2BAA0B+I,GAA1B,IAA8BjJ,MAAOuJ,EAAOvJ,QAASiJ,KAChF,IAAK,yBACD,OAAOlG,EAAM4F,KAAI,SAAAM,GAAE,OAAIA,EAAG/I,KAAOqJ,EAAOrJ,GAAjB,2BAA0B+I,GAA1B,IAA8BT,OAAQe,EAAOf,SAAUS,KAClF,IAAK,gCACD,OAAOlG,EAAM4F,KAAI,SAAAM,GAAE,OAAIA,EAAG/I,KAAOqJ,EAAOrJ,GAAjB,2BAA0B+I,GAA1B,IAA8BP,aAAca,EAAOvH,SAAUiH,KACxF,IAAK,gBACD,OAAOM,EAAOT,UAAUH,KAAI,SAAAM,GAAE,kCAASA,GAAT,IAAaT,OAAQ,MAAOE,aAAc,YAC5E,IAAK,aACD,MAAO,GACX,QACI,OAAO3F,IIbf6H,IVAsB,WAAoF,IAAnF7H,EAAkF,uDAAxD5B,EAAcoI,EAA0C,uCACzG,OAAQA,EAAOpH,MACX,IAAK,iBACD,OAAO,2BAAIY,GAAX,IAAkBf,OAAQuH,EAAOvH,SACrC,IAAK,gBACD,OAAO,2BAAIe,GAAX,IAAkB9B,MAAOsI,EAAOtI,QACpC,IAAK,yBACD,OAAO,2BAAI8B,GAAX,IAAkBJ,cAAe4G,EAAOkC,eAC5C,QACI,OAAO,eAAI1I,KURnBC,KXFuB,WAAoF,IAAnFD,EAAkF,uDAAxD5B,EAAcoI,EAA0C,uCAC1G,MACS,2BADDA,EAAOpH,KAEA,2BAAIY,GAAX,IAAkBP,WAAY+G,EAAO7G,QAE9BK,KWAN0J,GAAQC,aAAYL,GAAaM,aAAgBC,OAM9DC,OAAOJ,MAAQA,G,aCbfK,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,KAAD,UACA,cAAC,IAAD,CAAUP,MAAOA,GAAjB,SACQ,cAAC,GAAD,UAIZQ,SAASC,eAAe,SAM5BnO,M","file":"static/js/main.9e852b49.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '9c1915de-cb3d-4067-90cf-ce2756b5db2c'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginParamsType,\r\n            AxiosResponse<ResponseType<{ userId: number }>>>\r\n        (`auth/login`, data)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(`/auth/login`)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<MeResponseType>>(`auth/me`)\r\n    }\r\n}\r\n// types\r\nexport type MeResponseType = {\r\n    id: number,\r\n    email: string,\r\n    login: string\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe?: boolean,\r\n    captcha?: string\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {Dispatch} from 'redux'\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        case \"CLEAR-DATA\":\r\n            return {}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const clearDataAC = () => ({type: 'CLEAR-DATA'} as const)\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => ({\r\n    type: 'UPDATE-TASK',\r\n    model,\r\n    todolistId,\r\n    taskId\r\n} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n    type: 'SET-TASKS',\r\n    tasks,\r\n    todolistId\r\n} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(updateTaskAC(taskId, domainModel, todolistId))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | ReturnType<typeof clearDataAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import {Dispatch} from \"redux\";\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../../app/app-reducer\";\r\nimport {authAPI, LoginParamsType} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {clearDataAC} from \"../TodolistsList/tasks-reducer\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState;\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setIsLoggedInAC = (value: boolean) => {\r\n    return ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n}\r\n\r\nexport const loginTC = (values: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(values)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(setIsLoggedInAC(true))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch);\r\n        })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(clearDataAC())\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch);\r\n        })\r\n}\r\n\r\ntype ActionsType =\r\n    ReturnType<typeof setIsLoggedInAC>\r\n    | ReturnType<typeof clearDataAC>\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case \"APP/SET-INITIALIZATION\":\r\n            return {...state, isInitialized: action.isInitilized}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setInitializationAC = (isInitilized: boolean) => ({type: 'APP/SET-INITIALIZATION', isInitilized} as const)\r\n\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true))\r\n        } else {\r\n        }\r\n    })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n        .finally(() => {\r\n            dispatch(setInitializationAC(true))\r\n        })\r\n}\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetInitializationActionType = ReturnType<typeof setInitializationAC>\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | SetInitializationActionType\r\n","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {useFormik} from 'formik';\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {LoginParamsType} from \"../../api/todolists-api\";\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const navigate = useNavigate();\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: Partial<Omit<LoginParamsType, 'captcha'>> = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Поле пароль обязательно';\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Must be 8 characters or more';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm();\r\n        },\r\n    })\r\n    if (isLoggedIn) {\r\n        navigate('/')\r\n    }\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\" margin=\"normal\" {...formik.getFieldProps('email')}/>\r\n                        {formik.touched.email && formik.errors.email &&\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                        <TextField type=\"password\" label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password &&\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel label={'Remember me'} control={<Checkbox\r\n                            {...formik.getFieldProps('rememberMe')}/>}/>\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport AddBox from '@mui/icons-material/AddBox';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback} from 'react'\r\nimport {Task} from './Task/Task'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport Delete from '@mui/icons-material/Delete';\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {clearDataAC, fetchTasksTC} from \"./tasks-reducer\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        case \"CLEAR-DATA\":\r\n            return []\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: any) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                return res.data\r\n            })\r\n            .then((todos) => {\r\n                todos.forEach((tl) => {\r\n                    dispatch(fetchTasksTC(tl.id))\r\n                })\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC('loading'))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n    | ReturnType<typeof clearDataAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {AppRootStateType} from '../../app/store'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'login'}/>\r\n    }\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {AppRootStateType} from \"../../app/store\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n\r\n","import {useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {Navigate, Route, Routes} from 'react-router-dom'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {logoutTC} from \"../features/Login/auth-reducer\";\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport CircularProgress from '@mui/material/CircularProgress'\r\nimport {AppRootStateType} from './store'\r\nimport './App.css'\r\n\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Logout</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path='/' element={<TodolistsList demo={demo}/>}/>\r\n                    <Route path='/login' element={<Login/>}/>\r\n                    <Route path='/404' element={<h1 style={{textAlign: 'center'}}>404: Page not found</h1>}/>\r\n                    <Route path='*' element={<Navigate to=\"/404\"/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import { tasksReducer } from '../features/TodolistsList/tasks-reducer';\r\nimport { todolistsReducer } from '../features/TodolistsList/todolists-reducer';\r\nimport { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { appReducer } from './app-reducer'\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n        <Provider store={store}>\n                <App/>\n        </Provider>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}